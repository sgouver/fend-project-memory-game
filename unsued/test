let i;
for (i = 0; i < myCardlist.length; i++) {
   document.addEventListener("click", function (i) {
   il.classList.add("show", "open");
      } );
}

if (ev.target.tagName === "li") {


var i;
for (i = 0; i < cards.length; i++) {
cards[i].addEventListener("click", function(evt) {
   if (openCards <= 2) {
     evt.target.classList.toggle("show");
     evt.target.classList.toggle("open");

 } else{  }
});
}

function moveCounter(){
         moves++;
         counter.innerHTML = moves;
     }

     disable();

     //disable cards temporarily
     function disable(){
         Array.prototype.filter.call(cards, function(card){
             card.classList.add('disabled');
         });
     }



     function enable(){
         Array.prototype.filter.call(cards, function(card){
             card.classList.remove('disabled');
             for(var i = 0; i < matchedCard.length; i++){
                 matchedCard[i].classList.add("disabled");
             }
         });
     }


     //Shuffle function
     const deckShuffle = document.querySelector(".deck");

     function shuffle(array) {
         var currentIndex = array.length, temporaryValue, randomIndex;

         while (currentIndex !== 0) {
             randomIndex = Math.floor(Math.random() * currentIndex);
             currentIndex -= 1;
             temporaryValue = array[currentIndex];
             array[currentIndex] = array[randomIndex];
             array[randomIndex] = temporaryValue;
         }

         return array;
     }

     function startGame(){
        var shuffledCards = shuffle(cards);
        for (var i= 0; i < shuffledCards.length; i++){
           [].forEach.call(shuffledCards, function(item){
              deckShuffle.appendChild(item);
           });
        }
     }

     //start the game with browser refresh
     window.onload = startGame();
